// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Necessary for Next auth
//Created every time a user signs in with a new provider (ie. Google, Azure AD)
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    ext_expires_in    Int? // Added for Azure AD
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//Represents a user in the system, created when a user signs for the first time(only one per user)
model User {
    id                   String    @id @default(cuid())
    name                 String?
    email                String?   @unique
    emailVerified        DateTime?
    image                String?
    isOnboardingComplete Boolean   @default(false)
    accounts             Account[]
    sessions             Session[]

    Employee Employee?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Department {
    id                 Int          @id @default(autoincrement())
    name               String
    parentDepartmentId Int?
    parentDepartment   Department?  @relation("SubDepartments", fields: [parentDepartmentId], references: [id])
    subDepartments     Department[] @relation("SubDepartments")
    employees          Employee[]
    roles              Role[]
    isActive           Boolean      @default(true)
}

model Employee {
    id           Int            @id @default(autoincrement())
    firstName    String
    lastName     String
    phone        String
    email        String         @unique
    departmentId Int?
    department   Department?    @relation(fields: [departmentId], references: [id])
    managerId    Int?
    manager      Employee?      @relation("EmployeeManager", fields: [managerId], references: [id])
    subordinates Employee[]     @relation("EmployeeManager")
    roles        EmployeeRole[]
    isActive     Boolean        @default(true)
    User         User?          @relation(fields: [userId], references: [id])
    userId       String?        @unique
}

//TODO: Add more fields to the role model such as training requirements, etc.
model Role {
    id               Int                  @id @default(autoincrement())
    roleName         String
    departmentId     Int?
    department       Department?          @relation(fields: [departmentId], references: [id])
    roleLevel        Int
    employees        EmployeeRole[]
    responsibilities RoleResponsibility[]
    isActive         Boolean              @default(true)
}

model Responsibility {
    id          Int                  @id @default(autoincrement())
    description String
    roles       RoleResponsibility[]
    isActive    Boolean              @default(true)
}

model EmployeeRole {
    employeeId Int
    roleId     Int
    startDate  DateTime
    endDate    DateTime?

    employee Employee @relation(fields: [employeeId], references: [id])
    role     Role     @relation(fields: [roleId], references: [id])

    @@id([employeeId, roleId])
}

model RoleResponsibility {
    roleId           Int
    responsibilityId Int

    role           Role           @relation(fields: [roleId], references: [id])
    responsibility Responsibility @relation(fields: [responsibilityId], references: [id])

    @@id([roleId, responsibilityId])
}
