// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    ext_expires_in    Int? // Added for Azure AD
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String           @id @default(cuid())
    name             String?
    email            String?          @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    role             Role             @relation(fields: [roleId], references: [id])
    roleId           String
    team             Team             @relation(fields: [teamId], references: [id])
    teamId           String
    responsibilities Responsibility[]
    // Add other fields as needed
}

model Role {
    id    String @id @default(cuid())
    name  String @unique
    users User[]
}

model Team {
    id    String @id @default(cuid())
    name  String
    users User[]
}

model Responsibility {
    id          String @id @default(cuid())
    description String
    user        User   @relation(fields: [userId], references: [id])
    userId      String
}

// Add other models for trainings, software, governance, job aids, etc.

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
